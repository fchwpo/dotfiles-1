# Path to your oh-my-zsh installation.
export ZSH=/home/gcg/.oh-my-zsh

ZSH_THEME="agnoster"
HIST_STAMPS="yyyy-mm-dd"
plugins=(cloudapp jump heroku)

export PATH="/home/gcg/.gem/ruby/2.3.0/bin:/opt/android-sdk-linux/tools:/opt/android-sdk-linux/platform-tools:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl"
export PATH="$PATH:./node_modules/.bin:../node_modules/.bin:../../node_modules/.bin:../../../node_modules/.bin:../../../../node_modules/.bin"

# this slows down startup because nodejs
# export PATH="$PATH:$(yarn global bin 2>/dev/null)"
# so use this instead
export PATH="$PATH:$HOME/.config/yarn/global/node_modules/.bin"

# export MANPATH="/usr/local/man:$MANPATH"

# costly call
source $ZSH/oh-my-zsh.sh

debug() {
  zsh -xv -i -c "print -n" 2>&1 | ts -i "%.s" > zsh_startup.log
  n zsh_startup.log
  rm zsh_startup.log
}

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
#
alias vincenza='ssh -o PubKeyAuthentication=no -p 2222 vincenza@maisonvincenza.com.br'
export VISUAL=nvim
export EDITOR="$VISUAL"
alias webcam='guvcview'

# Git
alias g='git'
alias ga='git add'
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gcm='git commit -m'
alias gcam='git commit -a -m'
alias gst='git status'
alias griom='git rebase -i origin/master'
alias gd='git diff --minimal'
alias gdc='git diff --cached'
alias master='git co master&&g rcb'
gitinv() {
  cd ~/inv/repos/
  if [ ! -d "$1" ]; then
    git clone git@github.com:invisible-tech/$1.git
  fi
  cd $1
}
alias pr='hub pull-request'
alias n='nvim'
alias nn='f -e nvim'
alias nd='node -r ~/dotfiles/node'
na () { n "+/\c$*" `ag --ignore yarn.lock -l "$*"` }
nag () { n "+/\c$*" `ag --ignore yarn.lock -l "$*"` }
nf () { n `find -name "$*" -not -path "./node_modules/*"` }
nlint() { n `eslint --cache -f ~/code/_archive/eslint-formatter-list .` }
alias ff='ag -g'
alias w='watch -n 0.5 --color'
alias v='viewnior'
alias c='xclip -selection clipboard'
alias wr='nmcli r w off&&nmcli r w on'
alias ww='watch nmcli d w'
alias y='yarn'
alias ya='yarn add'
alias t='npm test'
m() {
  # mocha default path is test/mocha.opts
  file=$(readlink -f $1)
  [ -f "test/mocha.opts" ] && (mocha $file)
  [ -f "../../mocha.opts" ] && (cd ../../../ && mocha $file)
  [ -f "../../../mocha.opts" ] && (cd ../../../../ && mocha $file)
  [ -f "../../../../mocha.opts" ] && (cd ../../../../../ && mocha $file)
  [ -f "../../../../../mocha.opts" ] && (cd ../../../../../../ && mocha $file)
  [ -f "../../../../../../mocha.opts" ] && (cd ../../../../../../../ && mocha $file)
}
alias tw='npm run test-watch'
alias zshrc='nvim ~/.zshrc&&reload'
alias aa='ag --ignore yarn.lock'
nrc() {
  cd ~/dotfiles/
  n awesome/rc.lua
  cd -
  echo 'awesome.restart()' | awesome-client
}
re() {
  rec -t wav - | lame -V 9 -h - >/tmp/record.mp3
  cloudapp /tmp/record.mp3
}
mkd() { mkdir -p $1 && cd $1 }
tmp() {
  cd /tmp
  mkd $RANDOM
  npm init --yes
}
cc() { readlink -f $1 | c }
alias ng='killall ngrok 2>/dev/null;ngrok http -subdomain=gunar 3000 >/dev/null &!'
alias lint='nvim `eslint --cache -f ~/code/_archive/eslint-formatter-list --ignore-path .gitignore .`'
perf() {
  compton -b
  sudo pstate-frequency --set --plan powersave                                                                                             
}
powersave() {
  killall compton
  xbacklight -set 7
  sudo pstate-frequency --set --plan powersave                                                                                             
}
alias hibernate='sudo echo "ok" && xlock 2>/dev/null & echo disk | sudo tee /sys/power/state'
alias suspend='sudo echo "ok" && xlock 2>/dev/null & echo mem | sudo tee /sys/power/state'
alias wf='chromium --app="https://workflowy.com" --enable-apps --enable-extension-apps'
alias mictest='arecord -vvv -f dat /dev/null'
# pacman
pi() {
  sudo pacman -Syy $* && echo "sudo pacman -Syy $*">>~/dotfiles/manjaro/install.sh
}
alias pacs='pacman -Ss'
# yaourt
yi() {
  yaourt -Syy --noconfirm $* && echo "yaourt --noconfirm -Syy $*">>~/dotfiles/manjaro/install.sh
}
alias yars='yaourt -Ss'

alias curlpost='curl -v -H "Content-Type: application/json" -d @-'
gif() { ffmpeg -i $1 $1.gif }
gifhq() {
  palette="/tmp/palette.png"
  filters="fps=15,scale=420:-1:flags=lanczos"
  ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette
  ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $2
}
speedup() { ffmpeg -i $1 -filter_complex "[0:v]setpts=0.8*PTS[v]" -map "[v]" fast-$1 }
speedupx() { ffmpeg -i $1 -filter_complex "[0:v]setpts=$2*PTS[v]" -map "[v]" fast-$1 }
speedupa() { ffmpeg -i $1 -filter_complex "[0:v]setpts=0.8*PTS[v];[0:a]atempo=1.25[a]" -map "[v]" -map "[a]" fast-$1 }
reload() { source ~/.zshrc }

# heroku aliases
alias hl='heroku logs --remote production|less'
alias hls='heroku logs --remote staging|less'
alias hlt='heroku logs --tail --remote production'
alias hlts='heroku logs --tail --remote staging'
alias hlst='heroku logs --tail --remote staging'
alias hrel='heroku releases --remote production'
alias sta='git push -f staging HEAD:master'

export TERM=screen-256color-bce

eval $(dircolors ~/.dircolors)

# costly call
(eval "$(keychain --eval --quiet id_rsa)" &)

if [[ $TERM == xterm-termite ]]; then
  . /etc/profile.d/vte.sh
  __vte_osc7
fi

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /home/gcg/.config/yarn/global/node_modules/tabtab/.completions/serverless.zsh ]] && . /home/gcg/.config/yarn/global/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /home/gcg/.config/yarn/global/node_modules/tabtab/.completions/sls.zsh ]] && . /home/gcg/.config/yarn/global/node_modules/tabtab/.completions/sls.zsh

# vi mode
bindkey -v
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward
function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $EPS1"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=1
# ctrl+x for "... && exit"
function append-exit {
  BUFFER="$BUFFER && exit"
}
zle -N append-exit
bindkey "^S" append-exit
# alt+l for "ls"
function call-ls {
  zle accept-line
  echo ""
  ls
}
zle -N call-ls
bindkey "^[l" call-ls

# fasd ---------------
#
# commented out because nvim does not have viminfo file
# https://github.com/neovim/neovim/issues/999
# export _FASD_BACKENDS="current viminfo"
# export _FASD_VIMINFO=""
#
# costly call
eval "$(fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)"
bindkey "^X^X" fasd-complete    # C-x C-a to do fasd-complete (files and directories)
bindkey "^X^F" fasd-complete-f  # C-x C-f to do fasd-complete-f (only files)
bindkey "^X^D" fasd-complete-d  # C-x C-d to do fasd-complete-d (only directories)

# nvm (node version manager)
# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
if [ -s "/usr/share/nvm/init-nvm.sh" ] && [ ! "$(whence -w __init_nvm)" = function ]; then
  # export NVM_DIR="$HOME/.nvm"
  # [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
  declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
  function __init_nvm() {
    for i in "${__node_commands[@]}"; do unalias $i; done
    source /usr/share/nvm/init-nvm.sh
    unset __node_commands
    unset -f __init_nvm
  }
  for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
fi

# power settings
# "upower -e" to find out your devices
alias bat='upower -i /org/freedesktop/UPower/devices/battery_BAT0|grep -E "state|time\ to\ full|time\ to\ empty|percentage"'

# start x if first tty1
if [[ ! ${DISPLAY} && ${XDG_VTNR} == 1 ]]; then
  # mute microphone on startup
  amixer set Capture nocap
  exec startx 
fi

# not working
webcamrecord() {
  vlc v4l2:// :input-slave=alsa:// :v4l-vdev="/dev/video0" :v4l-norm=3 :v4l-frequency=-1 :v4l-caching=300 :v4l-chroma="" :v4l-fps=-1.000000 :v4l-samplerate=44100 :v4l-channel=0 :v4l-tuner=-1 :v4l-audio=-1 :v4l-stereo :v4l-width=480 :v4l-height=360 :v4l-brightness=-1 :v4l-colour=-1 :v4l-hue=-1 :v4l-contrast=-1 :no-v4l-mjpeg :v4l-decimation=1 :v4l-quality=100 --sout="#transcode{vcodec=theo,vb=2000,fps=12,scale=0.67,acodec=vorb,ab=90,channels=1,samplerate=44100}:standard{access=file,mux=ogg,dst=output.ogg}"
}

alias keys='xmodmap -pke|less'
alias np='n -c :Unite\ -no-split\ -buffer-name=files\ -start-insert\ -ignorecase\ -force-redraw\ file_rec/neovim'
alias dot='cd ~/dotfiles'



# TODO
# Markdown utilities (requires `brew install pandoc`)
# https://gist.githubusercontent.com/sportebois/605c81ee3acfa55c1aa047f053a2018e/raw/9a532a258f019170d8a4a749f15ef8aed8f6aefa/markdown_in_shell.sh
function mdless () {
  local mdfile=$1
  if [ -z ${mdfile:+x} ]; then mdfile="README.md"; fi
  case $mdfile in
      -h | --help)
        print "mdless usage: 'mdless myfile.md' or 'mdless' (defaults to README.md)"
      ;;
      *)
        mdcat $mdfile | less
      ;;
  esac
}
 
function mdcat () {
  local mdfile=$1
  if [ -z ${mdfile:+x} ]; then mdfile="README.md"; fi
  pandoc -s -f markdown -t man $mdfile | groff -T utf8 -man
}
