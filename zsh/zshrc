# Path to your oh-my-zsh installation.
export ZSH=/home/gcg/.oh-my-zsh

ZSH_THEME="agnoster"
HIST_STAMPS="yyyy-mm-dd"
plugins=(cloudapp jump heroku)

# infinite .zsh_history
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY

export PATH="/home/gcg/.gem/ruby/2.3.0/bin:/opt/android-sdk-linux/tools:/opt/android-sdk-linux/platform-tools:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl"
export PATH="$PATH:./node_modules/.bin:../node_modules/.bin:../../node_modules/.bin:../../../node_modules/.bin:../../../../node_modules/.bin"

# this slows down startup because nodejs
# export PATH="$PATH:$(yarn global bin 2>/dev/null)"
# so use this instead
export PATH="$PATH:$HOME/.config/yarn/global/node_modules/.bin"

# export MANPATH="/usr/local/man:$MANPATH"

# costly call
source $ZSH/oh-my-zsh.sh

source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

debug() {
  zsh -xv -i -c "print -n" 2>&1 | ts -i "%.s" > zsh_startup.log
  n zsh_startup.log
  rm zsh_startup.log
}

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
#
alias vincenza='ssh -o PubKeyAuthentication=no -p 2222 vincenza@maisonvincenza.com.br'
export VISUAL=nvim
export EDITOR="$VISUAL"
alias webcam='guvcview'

# Git
alias g='git'
alias ga='git add'
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gcm='git commit -m'
alias gc='git commit -v'
alias gcam='git commit -a -m'
alias gst='git status'
alias griom='git pom&&git rebase -i origin/master'
alias gd='git diff --minimal'
alias gdc='git diff --cached'
alias master='git co master&&g rcb'
# git interactive add
alias gia="git status -s | sed s/^...// | ipt -m -M 'Select files to add:' | xargs git add"
# git interactive show
alias gis="git stash list | ipt -M 'Select stashed item to show:' --unquoted | cut -d ':' -f 1 | xargs git stash show -u"
# git delete merged branches
alias gdmb="git branch --merged | grep -Ev '(^\*|master)' | xargs git branch -d"
gitinv() {
  cd ~/inv/repos/
  if [ ! -d "$1" ]; then
    git clone git@github.com:invisible-tech/$1.git
  fi
  cd $1
}
alias gh="chromium \`git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'\`"
alias pr='hub pull-request'
alias n='nvim'
alias nn='f -e nvim'
alias nd='node -r ~/dotfiles/node'
alias nt='nvim /tmp/$RANDOM'
alias ntsx='nvim /tmp/$RANDOM.tsx'
na () { n "+/\c$*" `ag --ignore yarn.lock --ignore-dir node_modules --ignore-dir .next -l "$*"` }
nag () { n "+/\c$*" `ag --ignore yarn.lock --ignore-dir node_modules --ignore-dir .next -l "$*"` }
nf () { n `find -name "$*" -not -path "./node_modules/*"` }
nlint() { n `eslint --cache -f ~/code/_archive/eslint-formatter-list .` }
alias ff='ag -g'
alias w='watch -n 0.5 --color'
alias v='viewnior'
alias c='xclip -selection clipboard'
alias diff='colordiff'
alias diffgh='diff -u'
alias wr='nmcli r w off&&nmcli r w on'
alias won='nmcli r w on'
alias woff='nmcli r w off'
alias wr='nmcli r w off&&nmcli r w on'
alias ww='watch nmcli d w'
alias y='yarn'
alias yd='yarn dev'
alias yy='yarn --ignore-scripts'
alias yya='yarn --ignore-scripts add'
alias ya='yarn add'
alias yd='yarn dev'
alias t='docker start pg;yarn test:all;docker stop pg'
alias cat='bat'
m() {
  # mocha default path is test/mocha.opts
  file=$(readlink -f $1)
  [ -f "test/mocha.opts" ] && (mocha $file)
  [ -f "../../mocha.opts" ] && (cd ../../../ && mocha $file)
  [ -f "../../../mocha.opts" ] && (cd ../../../../ && mocha $file)
  [ -f "../../../../mocha.opts" ] && (cd ../../../../../ && mocha $file)
  [ -f "../../../../../mocha.opts" ] && (cd ../../../../../../ && mocha $file)
  [ -f "../../../../../../mocha.opts" ] && (cd ../../../../../../../ && mocha $file)
}
alias tw='TS_NODE_FILES=true ts-mocha --watch'
alias zshrc='nvim ~/.zshrc&&reload'
alias gitconfig='nvim ~/.gitconfig'
alias aa='ag --ignore yarn.lock'
nrc() {
  cd ~/dotfiles/
  n awesome/rc.lua
  cd -
  # echo 'awesome.restart()' | awesome-client
}
re() {
  rec -t wav - | lame -V 9 -h - >rec.mp3
  # rec -t wav - | lame -V 9 -h - >/tmp/record.mp3
  # cloudapp /tmp/record.mp3
}
mkd() { mkdir -p $1 && cd $1 }
tmp() {
  cd /tmp
  mkd $RANDOM
  npm init --yes
  clear
}
tmpclone() {
  cd /tmp
  mkd $RANDOM
  git clone $* .
}
clonetmp() {
  cd /tmp
  mkd $RANDOM
  git clone $* .
}
cc() { readlink -f $1 | c }
alias ng='killall ngrok 2>/dev/null;ngrok http -subdomain=gunar 3000 >/dev/null &!'
alias lint='nvim `eslint --cache -f ~/code/_archive/eslint-formatter-list --ignore-path .gitignore .`'
perf() {
  compton -b
  if pstate-frequency --get|grep performance; then
    echo "already high"
  else
    sudo pstate-frequency --set --plan performance
  fi
}
powersave() {
  killall compton
  xbacklight -set 7
  sudo pstate-frequency --set --plan powersave
}
alias hibernate='sudo echo "ok" && xlock 2>/dev/null & echo disk | sudo tee /sys/power/state'
alias suspend='sudo echo "ok" && xlock 2>/dev/null & echo mem | sudo tee /sys/power/state'
alias wf='chromium --app="https://workflowy.com" --enable-apps --enable-extension-apps'
alias mictest='arecord -vvv -f dat /dev/null'
p() {
  while true
  do
    timeout --preserve-status 0.2 ping 8.8.8.8 -c 1|head -n 2|tail -n 1
  done
}
# pacman
pi() {
  sudo pacman -Syy $* && echo "sudo pacman -Syy $*">>~/dotfiles/manjaro/install.sh
}
pacs() {
  pacman -Ss $* | less
}
# yaourt
yi() { yaourt -Syy --noconfirm $* && echo "yaourt --noconfirm -Syy $*">>~/dotfiles/manjaro/install.sh }
yars() {
  yaourt -Ss $* | less
}

alias curlpost='curl -H "Content-Type: application/json" -d @-'
gif() { ffmpeg -i $1 $1.gif }
gifhq() {
  palette="/tmp/palette.png"
  filters="fps=15,scale=420:-1:flags=lanczos"
  ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette
  ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $1.hq.gif
}

speedup() { ffmpeg -i $1 -filter_complex "[0:v]setpts=0.8*PTS[v]" -map "[v]" fast-$1 }
speedupx() { ffmpeg -i $1 -filter_complex "[0:v]setpts=$2*PTS[v]" -map "[v]" fast-$1 }
speedupa() { ffmpeg -i $1 -filter_complex "[0:v]setpts=0.8*PTS[v];[0:a]atempo=1.25[a]" -map "[v]" -map "[a]" fast-$1 }
reload() { source ~/.zshrc }

# heroku aliases
alias hl='heroku logs --remote production|less'
alias hls='heroku logs --remote staging|less'
alias hlt='heroku logs --tail --remote production'
alias hlts='heroku logs --tail --remote staging'
alias hlst='heroku logs --tail --remote staging'
alias hrel='heroku releases --remote production'
alias h='heroku'
alias sta='git push -f staging HEAD:master'

export TERM=screen-256color-bce

eval $(dircolors ~/.dircolors)

# imagemagik aliases
shadow() {
  # http://www.imagemagick.org/script/command-line-options.php?#shadow
  convert $1 \( -clone 0 -background black -shadow 60x4+0+0 \) -reverse -background none -layers merge +repage $2
}
orb() {
  MASK=/tmp/mask$RANDOM.png
  INPUT=$1
  OUT=$2
  W=400
  H=400
  SIZE=$W\x$H

  let "CX = $W / 2"
  let "CY = $H / 2"
  RESIZED=/tmp/resized$RANDOM.png

  # Create the round mask 
  convert -size $SIZE xc:black -fill white -draw "circle $CX,$CY $CX,0" $MASK

  # Resize original image
  convert $INPUT -resize $SIZE $RESIZED

  # cut the mask shape out of the image 
  convert $RESIZED $MASK -alpha Off -compose CopyOpacity -composite $OUT
  # composite -compose dst-out $MASK $INPUT -matte $OUT

  rm $MASK
  rm $RESIZED
}
mergepdf() {
  gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=$1 $2 $3 $4 $5
}

# costly call
eval "$(keychain --eval --quiet id_rsa)"

if [[ $TERM == xterm-termite ]]; then
  . /etc/profile.d/vte.sh
  __vte_osc7
fi

# vi mode
bindkey -v
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward
function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $EPS1"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=1
# ctrl+x for "... && exit"
function append-exit {
  BUFFER="$BUFFER && exit"
}
zle -N append-exit
bindkey "^S" append-exit
# alt+l for "ls"
function call-ls {
  zle accept-line
  echo ""
  exa --long # ls
}
zle -N call-ls
bindkey "^[l" call-ls

# alt+s for "git status"
function call-gst {
  zle accept-line
  echo ""
  gst
}
zle -N call-gst
bindkey "^[s" call-gst
# alt+s for "git diff"
function call-gd {
  zle accept-line
  echo ""
  gd
}
zle -N call-gd
bindkey "^[d" call-gd

# fasd ---------------
#
# commented out because nvim does not have viminfo file
# https://github.com/neovim/neovim/issues/999
# export _FASD_BACKENDS="current viminfo"
# export _FASD_VIMINFO=""
#
# costly call
eval "$(fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)"
bindkey "^X^X" fasd-complete    # C-x C-a to do fasd-complete (files and directories)
bindkey "^X^F" fasd-complete-f  # C-x C-f to do fasd-complete-f (only files)
bindkey "^X^D" fasd-complete-d  # C-x C-d to do fasd-complete-d (only directories)

# nvm (node version manager)
# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
if [ -s "/usr/share/nvm/init-nvm.sh" ] && [ ! "$(whence -w __init_nvm)" = function ]; then
  # export NVM_DIR="$HOME/.nvm"
  # [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
  declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
  function __init_nvm() {
    for i in "${__node_commands[@]}"; do unalias $i; done
    source /usr/share/nvm/init-nvm.sh
    unset __node_commands
    unset -f __init_nvm
  }
  for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
fi

# power settings
# "upower -e" to find out your devices
alias batt='upower -i /org/freedesktop/UPower/devices/battery_BAT0|grep -E "state|time\ to\ full|time\ to\ empty|percentage"'

# start x if first tty1
if [[ ! ${DISPLAY} && ${XDG_VTNR} == 1 ]]; then
  # mute microphone on startup
  amixer set Capture nocap
  exec ssh-agent startx 
  teamviewer
fi

# not working
webcamrecord() {
  vlc v4l2:// :input-slave=alsa:// :v4l-vdev="/dev/video0" :v4l-norm=3 :v4l-frequency=-1 :v4l-caching=300 :v4l-chroma="" :v4l-fps=-1.000000 :v4l-samplerate=44100 :v4l-channel=0 :v4l-tuner=-1 :v4l-audio=-1 :v4l-stereo :v4l-width=480 :v4l-height=360 :v4l-brightness=-1 :v4l-colour=-1 :v4l-hue=-1 :v4l-contrast=-1 :no-v4l-mjpeg :v4l-decimation=1 :v4l-quality=100 --sout="#transcode{vcodec=theo,vb=2000,fps=12,scale=0.67,acodec=vorb,ab=90,channels=1,samplerate=44100}:standard{access=file,mux=ogg,dst=output.ogg}"
}
alias ss='systemctl status'
alias sdr='sudo systemctl daemon-reload'
alias sstart='sudo systemctl start'
alias blue='bluetoothctl'
function jbl {
  blue power on
  blue connect 04:FE:A1:B3:FF:47 
}
function ed { # Edifier
  blue power on
  while (! blue connect 04:FE:A1:E8:D9:20)
  do
    sleep 0.1
  done
}
function btoff { # Edifier
  blue disconnect 04:FE:A1:B3:FF:47 
  blue disconnect 04:FE:A1:E8:D9:20
}
alias blueswitch='~/dotfiles/scripts/blueswitch.sh'


alias keys='xmodmap -pke|less'
alias np='n -c :Denite\ -start-filter\ -no-split\ -buffer-name=files\ -ignorecase\ file/rec'

alias dotf='cd ~/dotfiles'
function dox() {
  cd ~/Downloads
  teensy-loader-cli -v -w -mmcu=atmega32u4 $(ls -t1 *.hex|head -1)
}



# TODO
# Markdown utilities (requires `brew install pandoc`)
# https://gist.githubusercontent.com/sportebois/605c81ee3acfa55c1aa047f053a2018e/raw/9a532a258f019170d8a4a749f15ef8aed8f6aefa/markdown_in_shell.sh
function mdless () {
  local mdfile=$1
  if [ -z ${mdfile:+x} ]; then mdfile="README.md"; fi
  case $mdfile in
      -h | --help)
        print "mdless usage: 'mdless myfile.md' or 'mdless' (defaults to README.md)"
      ;;
      *)
        mdcat $mdfile | less
      ;;
  esac
}
 
function mdcat () {
  local mdfile=$1
  if [ -z ${mdfile:+x} ]; then mdfile="README.md"; fi
  pandoc -s -f markdown -t man $mdfile | groff -T utf8 -man
}


# For boot / clojure
# export BOOT_JVM_OPTIONS="--add-modules=java.xml.bind"
export BOOT_JVM_OPTIONS="--add-opens=java.base/java.net=ALL-UNNAMED"

alias fixhdmi="xrandr --output HDMI1 --mode 800x600&&xrandr --output HDMI1 --mode 1920x1080"
alias fixdns="echo \"nameserver 8.8.8.8\"|sudo tee /etc/resolv.conf"
alias did="nvim -c 'normal Go' -c 'r!date' ~/did.txt"
alias bandwidth="sudo iftop -i wlp4s0"
function sleep_until {
  seconds=$(( $(date -d "$*" +%s) - $(date +%s) )) # Use $* to eliminate need for quotes
  if [ $seconds -lt 0 ] ; then ((seconds+=24*60*60)) ; fi
  echo "Sleeping until $*"
  echo "Sleeping for $seconds seconds"
  sleep $seconds
}
alias csv='column -s, -t | less -#2 -N -S'

function goodnight() {
  powersave
  chromium http://homepages.neiu.edu/~mtailor/cs300/images/bluecolor.jpg
  xset s off
  echo "---"
  echo "--- Don't forget to move your mouse to the bottom right edge of the screen to disable the lock"
  echo "---"
  date
  sleep_until 06:30
  xbacklight -set 100%
  echo "--- Remember to do xset s"
}

alias win="/home/gcg/win/run.sh"
alias mac="(cd /home/gcg/mac/ ; sudo ./boot-macOS-HS.sh)"
alias tv="rm .config/minidlna/cache/files.db;minidlnad -dR"
alias serve="ifconfig | grep -A1 wlp4s0|grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n 1 && python3 -m http.server"
alias servelive="browser-sync start -s -f . --no-notify --host 0.0.0.0 --port 9000&&chromium http://0.0.0.0:9000"
alias compose="less /usr/share/X11/locale/en_US.UTF-8/Compose"
alias us="setxkbmap us"
alias de="setxkbmap de"
alias shot="flameshot gui"
alias up="TERM=xterm up"
alias parcelify="parcel build --target=node --bundle-node-modules"

# IBus for ibus-uniemoji
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus

# Postgres
alias pg="psql -h localhost -p 5432 -U postgres "

# gpg
alias aes256="gpg --symmetric --cipher-algo aes256"
alias enc="gpg --symmetric --cipher-algo aes256 | base64 --wrap=0"
alias dec="base64 -d | gpg -d"

alias mon="nodemon -e 'js jsx ts tsx sh json clj'"

function sql {
  # Usage: sql <heroku app name>
  pgcli $(heroku config --app $1 | grep -E "^DATABASE_URL:" | cut -d':' -f2-)
}
function sql2 {
  # Usage: sql <heroku app name>
  psql $(heroku config --app $1 | grep -E "^DATABASE_URL:" | cut -d':' -f2-) "${@:2}"
}

alias dockerprune='docker system prune -a --volumes'
alias yt='mpsyt'
# alias ls='exa'

# very fuzzy tab completion of filenames
# https://stackoverflow.com/a/25556544
# Need both of these, in this order (I think?)
zstyle ':completion:*' matcher-list 'r:[[:ascii:]]||[[:ascii:]]=** r:|=* m:{a-z\-}={A-Z\_}'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # match upper from lower case

alias delta="nmcli c up Delta"
alias 4g="nmcli c up \"COMPRE BITCOIN\""
alias hotspot="nmcli c up \"COMPRE BITCOIN\""

alias updates='sudo pamac-manager updates'
function gnew {
  git co master && g rcb && g co -b $1
}
alias gpu='lspci -vnn | grep VGA -A 12'
alias clear='tput reset'
alias ct='clear&&y check-types'
alias incognito='unset HISTFILE'
alias caps='setxkbmap -option compose:caps'
function logdiff {
  if ((2==$#)); then
    a=$1
    b=$2
    alog=$(echo $a | tr '/' '-').log
    blog=$(echo $b | tr '/' '-').log
    git log --oneline $a > $alog
    git log --oneline $b > $blog
    diff $alog $blog
  fi
}

function ygg {
  cd ~/inv/repos/yggdrasil
  tmux rename-window 'ygg'

  tmux new-window
  tmux rename-window 'mimir'
  tmux send-keys 'cd services/mimir && yarn dev' 'C-m'
  tmux split-window
  tmux send-keys 'cd services/mimir && tsc-watch --noEmit -p .' 'C-m'

  tmux new-window
  tmux rename-window 'midgard'
  tmux send-keys 'cd services/midgard && yarn dev' 'C-m'

  tmux new-window
  tmux rename-window 'heimdall'
  tmux send-keys 'cd services/heimdall && yarn dev' 'C-m'
}

function changeMac() {
  local mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
  sudo ifconfig wlp4s0 ether $mac
  sudo ifconfig wlp4s0 down
  sudo ifconfig wlp4s0 up
  echo "Your new physical address is $mac"
}

eval "$(direnv hook zsh)"
